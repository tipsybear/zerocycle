#!/usr/bin/env python
# zerocycle
# Admin script for running zerocyle commands
#
# Author:   Benjamin Bengfort <benjamin@bengfort.com>
# Created:  Sun Jul 13 08:51:00 2014 -0400
#
# Copyright (C) 2014 Bengfort.com
# For license information, see LICENSE.txt
#
# ID: zerocycle [] benjamin@bengfort.com $

"""
Admin script for running zerocyle commands
"""

##########################################################################
## Imports
##########################################################################

import os
import sys
import argparse

from zerocycle.db import syncdb as createdb
from zerocycle.ingest import ingest_report

##########################################################################
## Constants
##########################################################################

DESCRIPTION = "An administrative utility for the Zerocycle project"
EPILOG      = "For bugs or concerns, please leave an issue on Github"
VERSION     = "0.1"

##########################################################################
## Administrative Commands
##########################################################################

def syncdb(args):
    """
    Creates the database at the config location or the specified one.
    """
    url = createdb(args.database)
    return "Database created at %s" % url

def ingest(args):
    """
    Ingests a report or reports and saves them to the database.
    """
    options = dict(vars(args))
    rtype   = options.pop('type')
    verbose = options.pop('verbosity')
    reports = 0
    objects = 0

    for report in options.pop('reports'):
        reports += 1
        for obj, created in ingest_report(rtype, report, **options):
            if verbose > 0:
                print obj
            if created: objects += 1

    return "%i reports ingested with %i objects" % (reports, objects)

##########################################################################
## Main Method
##########################################################################

def main(*arv):

    ## Construct the argument parser
    parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG, version=VERSION)
    subparsers = parser.add_subparsers(title='commands', description='Zerocycle Admin tools')

    ## SyncDB command
    syncdb_parser = subparsers.add_parser('syncdb', help='Create database and associated tables.')
    syncdb_parser.add_argument('database', type=str, nargs='?', default=None, help='Path to create a sqlite3 database')
    syncdb_parser.set_defaults(func=syncdb)

    ## Ingest command
    ingest_parser = subparsers.add_parser('ingest', help='Ingest a report into the database.')
    ingest_parser.add_argument('reports', type=str, nargs='+', help='Reports to ingest to database.')
    ingest_parser.add_argument('--verbosity', type=int, choices=(0,1,2,3), help='Specify verboseness of output.')
    ingest_parser.add_argument('-t', '--type', type=str, choices=('monthly', 'accounts'), help='Specify the type of report to ingest.')
    ingest_parser.add_argument('--no-commit', dest='commit', action='store_false', help='Do not commit to the database')
    ingest_parser.set_defaults(func=ingest)

    ## Handle input from the command line
    args = parser.parse_args()              # Parse the arguments from the command line
    # try:
    msg = args.func(args)               # Call the default function
    msg = msg + "\n" if msg else ''     # Add newline from return
    parser.exit(0, msg)                 # Exit cleanly with message
    # except Exception as e:
    #     parser.error(str(e))                # Exit with an error.


if __name__ == '__main__':
    main(*sys.argv[1:])
